version: "3.8"


volumes:
  pgdata:
  grafana-storage:


services:
  traefik:
    image: traefik
    restart: always
    container_name: traefik
    ports:
      - "80:80" # <== http
      - "8080:8080" # <== :8080 is where the dashboard runs on
      - "443:443" # <== https
    command:
    #### These are the CLI commands that will configure Traefik and tell it how to work! ####
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api.insecure=true # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - --api.debug=false # <== Enabling additional endpoints for debugging and profiling
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=DEBUG # <== Setting the level of the logs from traefik
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      - --providers.file.filename=/traefik/dynamic.yaml # <== Referring to a dynamic configuration file
      - --providers.docker.network=main # <== Operate on the docker network named web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.server-entrypoint.address=:80 # <== Defining an entrypoint for port :80 named web
      - --entrypoints.server-secured-entrypoint.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      - --certificatesresolvers.tls-certificate-resolver.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
      - --certificatesresolvers.tls-certificate-resolver.acme.email=mopitz199@gmail.com # <== Setting email for certs
      - --certificatesresolvers.tls-certificate-resolver.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
    volumes:
      - ./letsencrypt:/letsencrypt # <== Volume for certs (TLS)
      - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
      - ./traefik:/traefik # <== Volume for dynamic conf file, **ref: line 27
    networks:
      - main # <== Placing traefik on the network named main, to access containers on this network
    labels:
    #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - "traefik.http.routers.api.rule=Host(`laconga.work/dashboard`)" # <== Setting the domain for the dashboard
      - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access
  db:
    build:
      dockerfile: docker/postgres/Dockerfile
      context: .
    environment:
      POSTGRES_DB: "${DATABASE_HOST}"
      POSTGRES_USER: "${DATABASE_USER}"
      POSTGRES_PASSWORD: "${DATABASE_PASSWORD}"
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    networks:
      - main
  api:
    build:
      dockerfile: docker/api/Dockerfile
      context: .
    command: sh -c "python manage.py migrate && gunicorn --env DJANGO_SETTINGS_MODULE=djangoprod.settings-prod djangoprod.wsgi -b 0.0.0.0:${PORT}"
    volumes:
      - .:/code
    environment:
      DEPLOYMENT_COLOR: "${IDLE_COLOR}"
    networks:
      - main
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container

      - "traefik.http.routers.server-secured-metrics-router.entrypoints=server-secured-entrypoint" # <== Defining entrypoint for https
      - "traefik.http.routers.server-secured-metrics-router.rule=Host(`${DOMAIN}`) && PathPrefix(`/metrics`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.server-secured-metrics-router.middlewares=server-secured-metrics-middleware"
      - "traefik.http.routers.server-secured-metrics-router.tls.certresolver=tls-certificate-resolver" # <== Defining certsresolvers for https
      - "traefik.http.middlewares.server-secured-metrics-middleware.basicauth.users=max:$$apr1$$n7ep9klb$$aEM7SYUnMbIpGSt914JaF/"

      - "traefik.http.routers.server-router.rule=Host(`${DOMAIN}`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.server-router.entrypoints=server-entrypoint" # <== Defining the entrypoint for http, **ref: line 30
      - "traefik.http.routers.server-router.middlewares=redirect@file" # <== This is a middleware to redirect to https

      - "traefik.http.routers.server-secured-router.rule=Host(`${DOMAIN}`)" # <== Your Domain Name for the https rule 
      - "traefik.http.routers.server-secured-router.entrypoints=server-secured-entrypoint" # <== Defining entrypoint for https
      - "traefik.http.routers.server-secured-router.tls.certresolver=tls-certificate-resolver" # <== Defining certsresolvers for https

      - "traefik.http.services.load-balancer-service.loadbalancer.responseforwarding.flushinterval=-1"
      - "traefik.http.services.load-balancer-service.loadbalancer.server.port=${PORT}"
      - "traefik.http.services.load-balancer-service.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.load-balancer-service.loadbalancer.healthcheck.port=${PORT}"
      - "traefik.http.services.load-balancer-service.loadbalancer.healthcheck.timeout=2s"
      - "traefik.http.services.load-balancer-service.loadbalancer.healthcheck.interval=60s"
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus
    networks:
      - main # <== Placing traefik on the network named main, to access containers on this network
  grafana:
    image: grafana/grafana:latest
    container_name: monitoring_grafana
    restart: unless-stopped
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - grafana-storage:/var/lib/grafana grafana/grafana
    environment:
      - "GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}"
      - "GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}"
      - "GF_SERVER_DOMAIN=${GF_SERVER_DOMAIN}"
      - "GF_SMTP_ENABLED=${GF_SMTP_ENABLED}"
      - "GF_SMTP_HOST=${GF_SMTP_HOST}"
      - "GF_SMTP_USER=${GF_SMTP_USER}"
      - "GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}"
      - "GF_SMTP_FROM_ADDRESS=${GF_SMTP_FROM_ADDRESS}"
    networks:
      - main # <== Placing traefik on the network named main, to access containers on this network
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container
      - "traefik.http.routers.grafana-router.rule=Host(`grafana.${DOMAIN}`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.grafana-router.entrypoints=server-entrypoint" # <== Defining the entrypoint for http, **ref: line 30
      # - "traefik.http.routers.grafana-router.middlewares=redirect@file" # <== This is a middleware to redirect to https
      # - "traefik.http.routers.grafana-secured-router.rule=Host(`grafana.${DOMAIN}`)" # <== Your Domain Name for the https rule 
      # - "traefik.http.routers.grafana-secured-router.entrypoints=server-secured-entrypoint" # <== Defining entrypoint for https, **ref: line 31
      # - "traefik.http.routers.grafana-secured-router.tls.certresolver=tls-certificate-resolver" # <== Defining certsresolvers for https

networks:
  main:
    external: true